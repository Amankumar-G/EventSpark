### File: E:\Codings\intern\eventspark\src\app\api\attendee\bookings\route.ts ###
import { NextRequest, NextResponse } from "next/server";
import { connect } from "@/dbConfig/dbConfig";
import Booking from "@/models/Booking";
import Event from "@/models/Event";
import { auth } from "@clerk/nextjs/server";

export async function GET(req: NextRequest) {
  try {
    await connect();

    const { userId } = await auth();

    if (!userId) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const bookings = await Booking.find({ userId }).populate({
      path: "event",
      select: "title date location slug ticketTypes bannerUrl", 
    });

    return NextResponse.json({ success: true, bookings });
  } catch (error: any) {
    console.error("GET /api/attendee/bookings error:", error);
    return NextResponse.json(
      { success: false, error: error.message },
      { status: 500 }
    );
  }
}



### File: E:\Codings\intern\eventspark\src\app\api\checkout\route.ts ###
// app/api/checkout/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { stripe } from '@/lib/stripe';
import { connect } from '@/dbConfig/dbConfig';
import Event from '@/models/Event';
import Booking from '@/models/Booking';
import { generateAttendeeId, generateBookingReference, validateTicketAvailability } from '@/lib/booking-utils';

export async function POST(request: NextRequest) {
  try {
    await connect();
    
    const { eventId, ticketSelections, attendeeData } = await request.json();
    
    // Validate required fields
    if (!eventId || !ticketSelections || !attendeeData) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      );
    }
    
    // Fetch event
    const event = await Event.findById(eventId);
    if (!event) {
      return NextResponse.json(
        { error: 'Event not found' },
        { status: 404 }
      );
    }
    
    // Validate event status
    if (event.status !== 'approved') {
      return NextResponse.json(
        { error: 'Event is not available for registration' },
        { status: 400 }
      );
    }
    
    // Validate ticket availability
    const validation = validateTicketAvailability(event, ticketSelections);
    if (!validation.isValid) {
      return NextResponse.json(
        { error: 'Invalid ticket selection', details: validation.errors },
        { status: 400 }
      );
    }
    
    // Calculate total amount and check if there are paid items
    let totalAmount = 0;
    let hasPaidItems = false;
    const lineItems = [];
    
    for (const selection of ticketSelections) {
      const ticketType = event.ticketTypes[selection.ticketTypeIndex];
      const itemTotal = ticketType.price * selection.quantity;
      totalAmount += itemTotal;
      
      if (ticketType.price > 0) {
        hasPaidItems = true;
        lineItems.push({
          price_data: {
            currency: 'usd',
            product_data: {
              name: `${event.title} - ${ticketType.name}`,
              description: `Event: ${event.title}`,
              metadata: {
                eventId: eventId,
                ticketTypeIndex: selection.ticketTypeIndex.toString(),
              },
            },
            unit_amount: Math.round(ticketType.price * 100), // Convert to cents
          },
          quantity: selection.quantity,
        });
      }
    }
    
    // Generate IDs
    const attendeeId = generateAttendeeId();
    const bookingReference = generateBookingReference();
    
    // Create booking record
    const booking = new Booking({
      eventId,
      attendeeId,
      attendeeData,
      ticketSelections: ticketSelections.map((selection: any) => ({
        ticketTypeIndex: selection.ticketTypeIndex,
        quantity: selection.quantity,
        priceAtBooking: event.ticketTypes[selection.ticketTypeIndex].price,
      })),
      totalAmount,
      paymentStatus: hasPaidItems ? 'pending' : 'free',
      bookingReference,
    });
    
    // Handle free registration
    if (!hasPaidItems) {
      await booking.save();
      
      // Add attendee to event
      await Event.findByIdAndUpdate(eventId, {
        $push: {
          attendees: {
            attendeeId,
            data: attendeeData,
          },
        },
      });
      
      // Update sold count for each ticket type
      for (const selection of ticketSelections) {
        await Event.findOneAndUpdate(
          { 
            _id: eventId,
            [`ticketTypes.${selection.ticketTypeIndex}`]: { $exists: true }
          },
          {
            $inc: {
              [`ticketTypes.${selection.ticketTypeIndex}.sold`]: selection.quantity
            }
          }
        );
      }
      
      return NextResponse.json({
        success: true,
        type: 'free',
        bookingReference,
        attendeeId,
        message: 'Free registration completed successfully',
      });
    }
    
    // Create Stripe checkout session for paid tickets
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ['card'],
      line_items: lineItems,
      mode: 'payment',
      success_url: `${process.env.NEXT_PUBLIC_DOMAIN}/booking/success?session_id={CHECKOUT_SESSION_ID}`,
      cancel_url: `${process.env.NEXT_PUBLIC_DOMAIN}/booking/cancel?booking_ref=${bookingReference}`,
      customer_email: attendeeData.email,
      metadata: {
        eventId,
        bookingId: booking._id.toString(),
        attendeeId,
        bookingReference,
      },
      expires_at: Math.floor(Date.now() / 1000) + (30 * 60), // 30 minutes
    });
    
    // Update booking with session ID
    booking.stripeSessionId = session.id;
    await booking.save();
    
    return NextResponse.json({
      success: true,
      type: 'paid',
      sessionId: session.id,
      bookingReference,
      attendeeId,
    });
    
  } catch (error) {
    console.error('Checkout error:', error);
    return NextResponse.json(
      { error: 'Failed to process registration' },
      { status: 500 }
    );
  }
}



### File: E:\Codings\intern\eventspark\src\app\api\events\route.ts ###
import { NextRequest, NextResponse } from 'next/server'
import { connect } from '@/dbConfig/dbConfig'
import Event from '@/models/Event'
import { auth } from '@clerk/nextjs/server'
import User from '@/models/User'
import { v2 as cloudinary } from "cloudinary"
import fs from "fs"

// Setup Cloudinary
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME!,
  api_key: process.env.CLOUDINARY_API_KEY!,
  api_secret: process.env.CLOUDINARY_API_SECRET!,
})

/**
 * @swagger
 * /api/events:
 *   post:
 *     summary: Create a new event
 *     requestBody:
 *       required: true
 *       content:
 *         multipart/form-data:
 *           schema:
 *             type: object
 *             properties:
 *               title:
 *                 type: string
 *               banner:
 *                 type: string
 *                 format: binary
 *     responses:
 *       201:
 *         description: Event created successfully
 */
export async function POST(req: NextRequest) {
  try {
    // Connect to database
    await connect()
    
    const { userId } = await auth()
    if (!userId) return NextResponse.json({ error: "Unauthorized" }, { status: 401 })

    // Parse form data using NextRequest's built-in formData method
    const formData = await req.formData()
    
    // Extract form fields
    const title = formData.get('title') as string
    const slug = formData.get('slug') as string
    const description = formData.get('description') as string
    const startDate = formData.get('startDate') as string
    const endDate = formData.get('endDate') as string
    const location = formData.get('location') as string
    const ticketTypes = formData.get('ticketTypes') as string
    const isPublic = formData.get('isPublic') as string
    const formConfigRaw = formData.get('formConfig') as string;
    const formConfig = formConfigRaw ? JSON.parse(formConfigRaw) : null;
    // Extract files
    const banner = formData.get('banner') as File | null
    const brochure = formData.get('brochure') as File | null
    const speakers = formData.getAll('speakers') as File[]

    const upload = async (file: File, folder: string) => {
      // Convert File to buffer
      const bytes = await file.arrayBuffer()
      const buffer = Buffer.from(bytes)
      
      return new Promise((resolve, reject) => {
        cloudinary.uploader.upload_stream(
          {
            folder: `events/${folder}`,
            resource_type: 'auto'
          },
          (error, result) => {
            if (error) reject(error)
            else resolve(result?.secure_url)
          }
        ).end(buffer)
      })
    }

    // Upload files
    const bannerUrl = banner ? await upload(banner, "banners") : null
    const brochureUrl = brochure ? await upload(brochure, "brochures") : null

    let speakerUrls: string[] = []
    if (speakers && speakers.length > 0) {
      for (let speaker of speakers) {
        if (speaker instanceof File) {
          const url = await upload(speaker, "speakers")
          speakerUrls.push(url as string)
        }
      }
    }

    // Find the user in your database
    const user = await User.findOne({ clerkId: userId })
    if (!user) return NextResponse.json({ error: "User not found" }, { status: 404 })

    // Prepare the final event data
    const eventData = {
      title,
      slug,
      description,
      startDate: new Date(startDate),
      endDate: new Date(endDate),
      location: JSON.parse(location),
      ticketTypes: JSON.parse(ticketTypes),
      isPublic: isPublic === "true",
      formConfig,
      status: "pending",
      bannerUrl,
      brochureUrl,
      speakerImages: speakerUrls,
      organizer: user._id, // Use the MongoDB ObjectId, not Clerk userId
    }
    // Create and save the event
    const event = new Event(eventData)
    const savedEvent = await event.save()

    return NextResponse.json({ success: true, event: savedEvent }, { status: 201 })
  } catch (err) {
    console.error('POST Error:', err)
    return NextResponse.json({ error: "Server error" }, { status: 500 })
  }
}

/**
 * @swagger
 * /api/events:
 *   get:
 *     summary: List events for current user
 *     responses:
 *       200:
 *         description: List of events
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 events:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/Event'
 */
export async function GET(req: NextRequest) {
  try {
    await connect()

    const { userId } = await auth()
    if (!userId) return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 })

    const user = await User.findOne({ clerkId: userId })
    if (!user) return NextResponse.json({ success: false, error: 'User not found' }, { status: 404 })

    let events

    if (user.role === 'admin') {
      events = await Event.find().populate('organizer', 'name email').sort({ createdAt: -1 })
    } else if (user.role === 'organizer') {
      events = await Event.find({ organizer: user._id }).populate('organizer', 'name email').sort({ createdAt: -1 })
    } else {
      // For regular users, only show public events
      events = await Event.find({ isPublic: true, status: 'approved' }).populate('organizer', 'name email').sort({ createdAt: -1 })
    }

    return NextResponse.json({ success: true, events }, { status: 200 })
  } catch (error: any) {
    console.error('GET Error:', error)
    return NextResponse.json({ success: false, error: error.message }, { status: 500 })
  }
}



### File: E:\Codings\intern\eventspark\src\app\api\webhooks\user-created\route.ts ###
// src/app/api/webhooks/user-events/route.ts
import { WebhookEvent } from '@clerk/nextjs/server';
import { headers } from 'next/headers';
import { Webhook } from 'svix';
import { connect } from '@/dbConfig/dbConfig';
import User from '@/models/User';

export async function POST(request: Request) {
  try {
    const headerPayload = await headers();
    const svix_id = headerPayload.get('svix-id');
    const svix_timestamp = headerPayload.get('svix-timestamp');
    const svix_signature = headerPayload.get('svix-signature');

    if (!svix_id || !svix_timestamp || !svix_signature) {
      return new Response('Missing Svix headers', { status: 400 });
    }

    const payload = await request.text();
    const body = JSON.parse(payload);

    const WEBHOOK_SECRET = process.env.CLERK_WEBHOOK_SIGNING_SECRET;
    if (!WEBHOOK_SECRET) {
      throw new Error('Please add CLERK_WEBHOOK_SIGNING_SECRET to your environment variables');
    }

    const wh = new Webhook(WEBHOOK_SECRET);

    let evt: WebhookEvent;
    try {
      evt = wh.verify(payload, {
        'svix-id': svix_id,
        'svix-timestamp': svix_timestamp,
        'svix-signature': svix_signature,
      }) as WebhookEvent;
    } catch (err) {
      console.error('Error verifying webhook:', err);
      return new Response('Error verifying webhook', { status: 400 });
    }

    const eventType = evt.type;
    const user = evt.data;

    await connect();

    // Handle user.created
    if (eventType === 'user.created' && 'email_addresses' in user) {
      await User.create({
        clerkId: user.id,
        email: user.email_addresses?.[0]?.email_address || '',
        firstName: user.first_name || '',
        lastName: user.last_name || '',
        role: user.unsafe_metadata?.role || 'attendee',
        profileImage: user.image_url || '',
      });

      return new Response(JSON.stringify({ message: 'User created' }), {
        status: 200,
        headers: { 'Content-Type': 'application/json' },
      });
    }

    // Handle user.deleted
    if (eventType === 'user.deleted') {
      await User.findOneAndDelete({ clerkId: user.id });

      return new Response(JSON.stringify({ message: 'User deleted' }), {
        status: 200,
        headers: { 'Content-Type': 'application/json' },
      });
    }

    // Ignore other events
    return new Response('Event ignored', { status: 200 });
  } catch (e) {
    console.error('❌ Webhook error:', e);
    return new Response(JSON.stringify({ error: 'Internal Server Error' }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' },
    });
  }
}

export async function GET() {
  return new Response('Webhook endpoint for user.created and user.deleted', {
    status: 200,
  });
}



